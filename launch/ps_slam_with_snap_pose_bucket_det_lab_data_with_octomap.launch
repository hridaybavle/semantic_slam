<!--launch file -->
<launch>
		
  <param name="use_sim_time" value="true" />
	<arg name="bagfile" default="/media/hriday/0F2F8B1E48317A85/home/Documents/PhD/Rosbags/Semantic_SLAM/semantic_slam/ACL/lab/with_snap_pose/entire_lab/entire_lab_3_rounds.bag"/>

	<!-- Play the bagfile -->
  <node pkg="rosbag" type="play" name="rosbag" args="--clock $(arg bagfile)" />
	
 <!-- rectify color image-->
  <node name="image_proc" pkg="image_proc" type="image_proc" ns="camera/color"/>

  <!-- This nodelet is for rectifying the depth image-->
  <node pkg="nodelet" type="nodelet" name="depth_rectifier_manager" args="manager" output="screen"/>
   
    <node pkg="nodelet" type="nodelet" name="rectify_mono" args="load image_proc/rectify depth_rectifier_manager" output="screen" >
       <remap from="image_mono" to="/camera/aligned_depth_to_color/image_raw"/> 
       <remap from="image_rect" to="/camera/aligned_depth_to_color/image_rect"/>
    </node>
		
    <!--This nodelet is for converting the depth image to pointcloud data-->
  	<node pkg="nodelet" type="nodelet" name="depth_manager" args="manager" output="screen"/>
 		<node pkg="nodelet" type="nodelet" name="point_cloud_xyzrgb" args="load depth_image_proc/point_cloud_xyzrgb depth_manager" output="screen">
			<remap from="rgb/camera_info"             to="/camera/color/camera_info"/> 
  		<remap from="rgb/image_rect_color"        to="/camera/color/image_rect_color"/> 
			<remap from="depth_registered/image_rect" to="/camera/aligned_depth_to_color/image_rect"/>
  	</node>
		
  <!--shape color object detector-->
	<arg name="front_camera_image_topic_name" 										default="/camera/color/image_raw" />
  <arg name="object_recognized_front_camera_topic_name" 				default="/image_processed/object_recognized_front_camera" />
	<arg name="config_file"																				default="$(find ShapeColor_ObjectDetection)/cfg/objectDetector_configFile.xml"/>
    
		<node name="ShapeColor_ObjectDetection" pkg="ShapeColor_ObjectDetection" type="ObjectDetection_Node" output="screen" respawn="true">
				<param name="front_camera_image_topic_name"											value="$(arg front_camera_image_topic_name)" 									type="string"/>
				<param name="object_recognized_front_camera_topic_name" 				value="$(arg object_recognized_front_camera_topic_name)" 			type="string"/>
				<param name="config_file"																				value="$(arg config_file)"																		type="string"/>
		</node>
	
  <!--launching the semantic slam node -->	
	<node name="semantic_graph_slam_node" pkg="semantic_SLAM" type="semantic_graph_SLAM_node" output="screen">
	 <rosparam file="$(find semantic_SLAM)/config/bucket_detector_workspace.yaml" command="load"/>			
	</node>
  
	<!-- ocotomap node -->
	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
    <param name="resolution" value="0.05" />
    <!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
    <param name="frame_id" type="string" value="map" />
    <param name="base_frame_id" type="string" value="base_link_stabilized" />
    <!-- maximum range to integrate (speedup!) -->
    <param name="sensor_model/max_range" value="10.0" />
    <param name="pointcloud_min_z" value="-1.0" />
    <param name="pointcloud_max_z" value="5.0" />
    <!-- data source to integrate (PointCloud2) -->
    <remap from="cloud_in" to="/depth_registered/points" />
    <param name="filter_ground" value="false" />
	</node>

	<!--static tf of the camera to base_link-->
  <node pkg="tf" type="static_transform_publisher" name="cam_optical_to_cam" args="0 0 0 -0.2840155 0 0 0.9588197 camera camera_color_optical_frame 100" />
  <node pkg="tf" type="static_transform_publisher" name="cam_to_base_link" args="0 0 0 -0.5 0.499999999998 -0.5 0.50000000000 base_link camera 100" />

	 <!-- Show Rviz -->
	<arg name="show_rviz" default="true"/> 
  <group if="$(arg show_rviz)">
    <arg name="rviz_file" default="$(find semantic_SLAM)/rviz/graph_semantic_slam.rviz" />
    <node pkg="rviz" type="rviz" name="$(anon rviz)" output="screen"
          args="-d $(arg rviz_file)" />
  </group>

</launch>
